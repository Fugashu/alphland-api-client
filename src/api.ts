/* tslint:disable */
/* eslint-disable */
/**
 * AlphLand API
 * Public API for Alphland
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ContractDto
 */
export interface ContractDto {
    /**
     * 
     * @type {string}
     * @memberof ContractDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContractDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface DAppDto
 */
export interface DAppDto {
    /**
     * 
     * @type {string}
     * @memberof DAppDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DAppDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DAppDto
     */
    'short_description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DAppDto
     */
    'tags': Array<string>;
    /**
     * 
     * @type {Array<ContractDto>}
     * @memberof DAppDto
     */
    'contracts'?: Array<ContractDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DAppDto
     */
    'audits'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DAppDto
     */
    'verified': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DAppDto
     */
    'councils_choice': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DAppDto
     */
    'dotw': boolean;
    /**
     * 
     * @type {LinkDto}
     * @memberof DAppDto
     */
    'links': LinkDto;
    /**
     * 
     * @type {string}
     * @memberof DAppDto
     */
    'twitterName'?: string;
    /**
     * 
     * @type {TeamInfoDto}
     * @memberof DAppDto
     */
    'teamInfo': TeamInfoDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof DAppDto
     */
    'tokens'?: Array<string>;
    /**
     * 
     * @type {MediaDto}
     * @memberof DAppDto
     */
    'media': MediaDto;
}
/**
 * 
 * @export
 * @interface LinkDto
 */
export interface LinkDto {
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'careers'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'twitter'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'telegram'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'discord'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'github'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'youtube'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'medium'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkDto
     */
    'mirror'?: string;
}
/**
 * 
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'logoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'bannerUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'previewUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'videoUrl'?: string;
}
/**
 * 
 * @export
 * @interface TeamInfoDto
 */
export interface TeamInfoDto {
    /**
     * 
     * @type {string}
     * @memberof TeamInfoDto
     */
    'contactEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInfoDto
     */
    'founded'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamInfoDto
     */
    'anonymous'?: boolean;
}

/**
 * DAppsApi - axios parameter creator
 * @export
 */
export const DAppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all dApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetAllDapps: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dapps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specific dApp
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetDapp: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('dAppControllerGetDapp', 'name', name)
            const localVarPath = `/api/dapp/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get dApps by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetDappsByTag: async (tag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('dAppControllerGetDappsByTag', 'tag', tag)
            const localVarPath = `/api/dapps/tag/{tag}`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all unique tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetTags: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DAppsApi - functional programming interface
 * @export
 */
export const DAppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DAppsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all dApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppControllerGetAllDapps(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dAppControllerGetAllDapps(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DAppsApi.dAppControllerGetAllDapps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get specific dApp
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppControllerGetDapp(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DAppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dAppControllerGetDapp(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DAppsApi.dAppControllerGetDapp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get dApps by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppControllerGetDappsByTag(tag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DAppDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dAppControllerGetDappsByTag(tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DAppsApi.dAppControllerGetDappsByTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all unique tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppControllerGetTags(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dAppControllerGetTags(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DAppsApi.dAppControllerGetTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DAppsApi - factory interface
 * @export
 */
export const DAppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DAppsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all dApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetAllDapps(options?: RawAxiosRequestConfig): AxiosPromise<Array<DAppDto>> {
            return localVarFp.dAppControllerGetAllDapps(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specific dApp
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetDapp(name: string, options?: RawAxiosRequestConfig): AxiosPromise<DAppDto> {
            return localVarFp.dAppControllerGetDapp(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get dApps by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetDappsByTag(tag: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DAppDto>> {
            return localVarFp.dAppControllerGetDappsByTag(tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all unique tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppControllerGetTags(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.dAppControllerGetTags(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DAppsApi - object-oriented interface
 * @export
 * @class DAppsApi
 * @extends {BaseAPI}
 */
export class DAppsApi extends BaseAPI {
    /**
     * 
     * @summary Get all dApps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppsApi
     */
    public dAppControllerGetAllDapps(options?: RawAxiosRequestConfig) {
        return DAppsApiFp(this.configuration).dAppControllerGetAllDapps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specific dApp
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppsApi
     */
    public dAppControllerGetDapp(name: string, options?: RawAxiosRequestConfig) {
        return DAppsApiFp(this.configuration).dAppControllerGetDapp(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get dApps by tag
     * @param {string} tag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppsApi
     */
    public dAppControllerGetDappsByTag(tag: string, options?: RawAxiosRequestConfig) {
        return DAppsApiFp(this.configuration).dAppControllerGetDappsByTag(tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all unique tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppsApi
     */
    public dAppControllerGetTags(options?: RawAxiosRequestConfig) {
        return DAppsApiFp(this.configuration).dAppControllerGetTags(options).then((request) => request(this.axios, this.basePath));
    }
}



